set shell := ["pwsh.exe", "-c"]

all: lint format run

## Roda o dart format no projeto
format:
	@echo "╠ Formatting the code"
	@cd ../dependencies && fvm dart format .
	@cd ../common && fvm dart format .
	@cd ../modules && fvm dart format .
	@cd ../twittergb && fvm dart format .

## Roda o flutter clean
clean:
	@echo "╠ Cleaning the project..."
	@cd ../dependencies && fvm flutter clean
	@cd ../common && fvm flutter clean
	@cd ../modules && fvm flutter clean
	@cd ../twittergb && fvm flutter clean

## Roda o flutter clean
get:
	@echo "╠ Running flutter pub get..."
	@cd ../dependencies && fvm flutter pub get
	@cd ../common && fvm flutter pub get
	@cd ../modules && fvm flutter pub get
	@cd ../twittergb && fvm flutter pub get

force_clean: clean
	@cd ../dependencies && rm pubspec.lock
	@cd ../common && rm pubspec.lock
	@cd ../modules && rm pubspec.lock
	@cd ../twittergb && rm pubspec.lock

## Roda os testes unitários
run_unit:
	@echo "╠ Running the tests"
	@fvm flutter test || (echo "▓▓ Error while running tests ▓▓"; exit 1)

## Roda o linter
lint:
	@echo "╠ Verifying code..."
	@cd ../dependencies && fvm dart analyze . 
	@cd ../modules && fvm dart analyze . 
	@cd ../twittergb && fvm dart analyze .

## Roda o app em debug
run: lint format
	@echo "╠ Running the app"
	@fvm flutter run

## Gera o appbundle do app
build_bundle: clean get lint format
	@echo "╠ Building the app"
	@fvm flutter build appbundle

## Gera os APKs do app
build_apk: clean get lint format
	@echo "╠ Building the app"
	@fvm flutter build apk --split-per-abi